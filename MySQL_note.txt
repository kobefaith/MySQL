修改mysql配置文件
sudo vi /etc/mysql/my.cnf
重启mysql
service mysql restart
windows下mysql 的配置文件是my.ini
windows下的默认端口号是3306
windows下启动服务的命令是net start mysql  net start/stop可以启动/关闭任意的windows服务。也可以在右击计算机选择管理，然后再服务中选择服务内容重新启动。
mysql命令中  -u是用户名  -p是密码 -P是端口号  -h是服务器名称  mysql -u root -p -P 3306 -h 127.0.0.1
退出命令是exit;/quit;/\q;
修改提示符 用prompt 提示符     prompt \u@\h \d>     \u是用户名 \h是主机名 \d是数据库名 \D是日期
root@localhost>SELECT VERSION();
+-----------------+
| VERSION()       |
+-----------------+
| 5.6.24-0ubuntu2 |
+-----------------+
1 row in set (0.00 sec)

root@localhost>SELECT NOW();
+---------------------+
| NOW()               |
+---------------------+
| 2015-06-19 19:36:11 |
+---------------------+
1 row in set (0.02 sec)

root@localhost>SELECT USER();
+----------------+
| USER()         |
+----------------+
| root@localhost |
+----------------+
1 row in set (0.00 sec)
MySQL规范：关键字与函数名称全部大写，数据库名称，表名称，字段名称全部小写，SQL语句必须以分号结尾
CREATE DATABASE t1  创建数据库t1  CREATE DATABASE IF NOT EXISTS t1  如果要创建的数据库存在，则不返回错误
SHOW DATABASES; 显示所有的数据库
SHOW WARNINGS; 显示警告信息
SHOW CREATE DATABASE t1;显示创建的数据库信息
CREATE DATABASE IF NOT EXISTS t2 CHARACTER SET utf8;   创建数据库并指定编码方式
ALTER DATABASE t2 CHARACTER SET gbk;修改数据库的编码方式
DROP DATABASE t2; 删除数据库   
DROP DATABASE IF EXISTS t2;
Query OK, 0 rows affected, 1 warning (0.01 sec)

mysql> SHOW WARNINGS;
+-------+------+--------------------------------------------------+
| Level | Code | Message                                          |
+-------+------+--------------------------------------------------+
| Note  | 1008 | Can't drop database 't2'; database doesn't exist |
+-------+------+--------------------------------------------------+
1 row in set (0.00 sec)
数据类型：
整形：TINYINT 8位   SMALLINT16位  MEDIUMINT 24位 INT 32位 BIGINT 64位
浮点型：FLOAT[(M,D)] M 是总位数 D是小数点之后的位数 单精度可以保留小数点后7位。 DOUBLE[(M,D)]
日期时间型：YEAR TIME DATA DATETIME TIMESTAMP 用的非常少，一般用数据类型。
字符型：CHAR(M) M个字节 0<=M <= 255 VARCHAR(M) L+1个字节，其中L <= M 0<=M <= 65535 
TINYTEXT L+1个字节，其中L < 2的8次方 TEXT L+2个字节，其中L < 2的16次方
MEDIUMTEXT L+3个字节，其中L < 2的24次方 LONGTEXT L+4个字节，其中L < 2的32次方
ENUM('value1','value2')1个或2个字节   SET('value1','value2')1 2 3 4 或8个字节
数据表的操作：
USE test; 打开test
SELECT DATABASE();//显示当前打开的数据库
mysql> CREATE TABLE tb1(
    -> username VARCHAR(20),
    -> age TINYINT UNSIGNED,
    -> salary FLOAT(8,2) UNSIGNED
    -> );
mysql> SHOW TABLES;    查看数据库中的数据表
+----------------+
| Tables_in_test |
+----------------+
| tb1            |
+----------------+
1 row in set (0.00 sec)
mysql> SHOW TABLES FROM mysql;  //查看mysql数据库中的数据表
mysql> SHOW COLUMNS FROM tb1;   //查看数据表的结构
+----------+---------------------+------+-----+---------+-------+
| Field    | Type                | Null | Key | Default | Extra |
+----------+---------------------+------+-----+---------+-------+
| username | varchar(20)         | YES  |     | NULL    |       |
| age      | tinyint(3) unsigned | YES  |     | NULL    |       |
| salary   | float(8,2) unsigned | YES  |     | NULL    |       |
+----------+---------------------+------+-----+---------+-------+
3 rows in set (0.13 sec)
mysql> INSERT tb1 VALUES('tom',25,7899.45); //插入一条记录，省略列名称的话，要全部赋值。
mysql> INSERT tb1 (username,salary) VALUES('kobe',2800.00);//部分字段赋值
mysql> SELECT * FROM tb1; //查询所有的字段
mysql> CREATE TABLE tb2(
    -> username VARCHAR(20) NOT NULL,//不允许字段为空
    -> age TINYINT UNSIGNED NULL
    -> );
主键：一张数据表中只能存在一个主键，主键保证记录的唯一性，主键自动为NOT NULL 
mysql> CREATE TABLE tb3(
    -> id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,     //设置为主键，自动赋值 不用人为赋值
    -> username VARCHAR(30) NOT NULL        
    -> );                   
mysql> CREATE TABLE tb4(
    -> id SMALLINT UNSIGNED  PRIMARY KEY,     //设置为主键，没有AUTO_INCREMENT 可以人为赋值，但是不能重复
    -> username VARCHAR(30) NOT NULL        
    -> ); 
AUTO_INCREMENT 必须与PRIMARY KEY 一起使用，但是 PRIMARY KEY 不一定要与AUTO_INCREMENT 一起使用。
唯一约束：唯一约束可以保证记录的唯一性，唯一约束的字段可以为空值(NULL)，每张数据表可以存在多个唯一约束
mysql> CREATE TABLE tb4(
    -> id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,   
    -> username VARCHAR(30) NOT NULL UNIQUE KEY,     //唯一约束        
    -> age TINYINT UNSIGNED
    -> );
默认约束：如果没有明确为字段赋值，则自动赋予默认值。
mysql> CREATE TABLE tb5(
    -> id SMALLINT UNSIGNED AUTO_INCREMENT PRIMARY KEY,   
    -> username VARCHAR(30) NOT NULL UNIQUE KEY,     //唯一约束        
    -> sex ENUM('1','2','3') DEFAULT '3'    //默认值是3
    -> );
约束：约束保证数据的完整性和一致性。分为表级约束和列级约束。
外键约束：实现一对一或一对多的关系。
外键约束的要求：父表和子表必须使用相同的存储引擎，且必须是InnoDB,而且禁止使用临时表。
外键列和参照列必须具有相似的数据类型。其中数字的长度和是否有符号位必须相同，而字符的长度则可以不同。
外键列和参照列必须创建索引，如果参照列不存在索引的话，MySQL将自动创建索引。
配置文件中的default-storage-engine = INNODB 表示引擎是InnoDB
mysql> CREATE TABLE provinces(
    -> id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    -> pname VARCHAR(20) NOT NULL
    -> );
mysql> CREATE TABLE users(
    -> id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    -> username VARCHAR(20) NOT NULL,
    -> pid SMALLINT UNSIGNED,
    -> FOREIGN KEY (pid) REFERENCES provinces (id)    //设置外键，并与参照列绑定。
    -> );
mysql> SHOW INDEXES FROM provinces\G        //查看provinces表是否有索引
*************************** 1. row ***************************
        Table: provinces
   Non_unique: 0
     Key_name: PRIMARY
 Seq_in_index: 1
  Column_name: id
    Collation: A
  Cardinality: 0
     Sub_part: NULL
       Packed: NULL
         Null: 
   Index_type: BTREE
      Comment: 
Index_comment: 
1 row in set (0.04 sec)
外键约束的参照操作：
CASCADE:从父表删除或更新且自动删除或更新子表中匹配的行。
SET NULL:从父表删除或更新行，并设置子表中的外键列为NULL，如果使用该选项必须保证子表列没有指定NOT NULL
RESTRICT:拒绝对父表的删除或更新操作。
NO ACTION:标准SQL的关键字，在MySQL中与RESTRICT相同。
mysql> CREATE TABLE users1(
    -> id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    -> username VARCHAR(20) NOT NULL,
    -> pid SMALLINT UNSIGNED,
    -> FOREIGN KEY (pid) REFERENCES provinces (id) ON DELETE CASCADE 
    -> );
一般在项目中不使用物理外键，除了InnoDB 其他的引擎也不支持。
NOT NULL  DEFAULT 只存在列级约束，不存在表级约束。
ALTER TABLE users1 ADD age TINYINT UNSIGNED NOT NULL DEFAULT 10; //添加列
ALTER TABLE users1 ADD password VARCHAR(20) NOT NULL AFTER username;//放到username的后面
ALTER TABLE users1 ADD truename VARCHAR(20) NOT NULL FIRST;
ALTER TABLE users1 DROP truename;//删除列
ALTER TABLE users1 DROP truename,DROP password;
ALTER TABLE users1 ADD password VARCHAR(20) NOT NULL AFTER username,DROP truename;
ALTER TABLE users1 ADD PRIMARY KEY (id);
ALTER TABLE users1 ADD UNIQUE (username);
ALTER TABLE user1 ADD FOREIGN KEY (pid) REFERENCES provinces (id);
ALTER TABLE users1 DROP PRIMARY KEY;
ALTER TABLE users1 DROP INDEX username;//删除索引
ALTER TABLE users1 MODIFY id SMALLINT UNSIGNED NOT NULL FIRST；//改变列的位置，类型等。
ALTER TABLE users1 CHANGE pid p_id TINYINT UNSIGNED NOT NULL;//修改列的名称 和数据类型，
ALTER TABLE users1 RENAME users2 ;//两种数据表的改名方式RENAME TABLE users3 TO users2;
DROP TABLE users;   //删除表users
INSERT users VALUES(NULL,'Tim','345',37,1);  //NULL或 DEFAULT 表示利用自动递增功能。
INSERT users VALUES(NULL,'Tim','345',DEFAULT,1); //使用默认值
INSERT users VALUES(NULL,'Tim','345',DEFAULT,1),(NULL,'KOBE',md5('123'),38,1); //同时插入两条记录
INSERT users SET username='Ben',password='456';//这种方法一次只能插入一条记录，但是可以使用子查询。
记录插入有3中方式  1 是标准的INSERT VALUES 2 INSERT SET  3 INSERT SELECT 
更新记录：
mysql> UPDATE users SET age = age + 5;
mysql> UPDATE users SET age = age - id,sex = 0;  //同时更新两列或多列用逗号。
mysql> UPDATE users SET age = age + 10 WHERE id % 2 = 0; //带条件的更新
mysql> DELETE FROM users WHERE id = 6;
mysql> SELECT id,username FROM users;   //只查询部分列
mysql> SELECT sex FROM users GROUP BY sex;
mysql> SELECT sex,age FROM users GROUP BY sex HAVING age > 35;    //HAVING 是对分组后的数据进行筛选，筛选的条件 age 必须在前面出现或是聚合表达式
mysql> SELECT sex,SUM(age) FROM users GROUP BY sex HAVING SUM(age) > 35;
mysql> SELECT * FROM users ORDER BY id DESC; //ORDER对查询结果排序，DESC是降序
mysql> SELECT * FROM users ORDER BY age,id DESC;  //按两个字段排序，第一个相同的话，按第二个降序排列。
mysql> SELECT * FROM users LIMIT 3,2;   //只输出查询结果的 第4个（从0开始算起，与id的数值没有关系）开始的两个记录。
mysql> SELECT * FROM users ORDER BY id DESC LIMIT 2,2;
mysql> INSERT test(username) SELECT username FROM users WHERE age > 35; //把users 数据表中age大于35 的记录的username 写入到test表的username 字段。
SELECT * FROM users \G;表示以网格的形态来显示。
SET NAMES gbk;在客户端显示的时候用gbk编码。
子查询指嵌套在查询内部，且必须始终出现在圆括号内。
子查询可以包含多个关键字或条件，如DISTINCT GROUP BY ORDER BY LIMIT 函数等。
子查询的外层查询可以是 SELECT INSERT UPDATE SET或 DO
SELECT ROUND(AVG(goods_price),2) FROM tdb_goods; //计算价格的平均值，并四舍五入保留小数点后两位。
SELECT goods_id,goods_name,goods_price FROM dtb_goods WHERE goods_price >= (SELECT ROUND(AVG(goods_price),2) FROM tdb_goods);//嵌入子查询。
用比较运算符引发子查询的时候，可以使用ANY SOME  ALL .ANY SOME 表示满足其中一个就可以，ALL表示全部要满足。
SELECT goods_id,goods_name,goods_price FROM dtb_goods WHERE goods_price >= ANY (SELECT goods_price FROM tdb_goods WHERE goods_cate = '超级本');
使用IN [NOT] IN 引发的子查询 ANY与 IN 等价  !=ALL 与 NOT IN 等价
EXISTS  NOT EXISTS 引发的子查询 ，如果子查询返回任何行，EXISTS将返回TRUE 否则返回 FALSE。
INSERT tdb_goods_cates(cate_name) SELECT goods_cate FROM tdb_goods GROUP BY goods_cate;
将tdb_goods 表中的 商品分类 写入到 tdb_goods_cates表的cate_name 字段。
表的连接 MySQL JOIN CROSS JOIN INNER JOIN 是等价的  LEFT[OUTER] JOIN 左外连接 RIGHT[OUTER] JOIN 右外连接
UPDATE tdb_goods INNER JOIN tdb_goods_cates ON goods_cate = cate_name SET goods_cate = cate_id;
用INNER JOIN将两张表连接，连接的条件是 tdb_goods 的cate_name 等于tdb_goods_cates 的goods_cate ，
然后更新tdb_goods_cates的goods_cate 字段，用cate_id 更新。


























